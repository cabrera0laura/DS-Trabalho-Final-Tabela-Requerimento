// <auto-generated />
using LockAi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LockAi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250625191515_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LockAi.Models.Requerimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DataAtualizacao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.Property<string>("IdLocacao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.Property<string>("IdUsuarioAtualizacao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.Property<string>("Momento")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.Property<string>("Situacao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.Property<string>("TipoRequerimento")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("TB_REQUERIMENTOS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataAtualizacao = "01/06/2025",
                            IdLocacao = "001",
                            IdUsuarioAtualizacao = "007",
                            Momento = "Na locação de um objeto",
                            Observacao = "Preciso da chave para meu armario.",
                            Situacao = "Em analise",
                            TipoRequerimento = "Requerimento sem custo"
                        },
                        new
                        {
                            Id = 2,
                            DataAtualizacao = "02/06/2025",
                            IdLocacao = "002",
                            IdUsuarioAtualizacao = "006",
                            Momento = " Utilizando um objeto",
                            Observacao = "Perdi as chaves do meu armario",
                            Situacao = "Concluido",
                            TipoRequerimento = "Requerimento com custo"
                        },
                        new
                        {
                            Id = 3,
                            DataAtualizacao = "03/06/2025",
                            IdLocacao = "003",
                            IdUsuarioAtualizacao = "005",
                            Momento = " Utilizando um objeto",
                            Observacao = "o armario tem um objeto do antigo usuario",
                            Situacao = "Concluido",
                            TipoRequerimento = "Requerimento sem custo"
                        },
                        new
                        {
                            Id = 4,
                            DataAtualizacao = "04/06/2025",
                            IdLocacao = "004",
                            IdUsuarioAtualizacao = "004",
                            Momento = " Utilizando um objeto",
                            Observacao = "quero canselar o plano e receber o restante do meu dinheiro",
                            Situacao = "Negado",
                            TipoRequerimento = "Requerimento com custo"
                        },
                        new
                        {
                            Id = 5,
                            DataAtualizacao = "05/06/2025",
                            IdLocacao = "005",
                            IdUsuarioAtualizacao = "003",
                            Momento = " Utilizando um objeto",
                            Observacao = "Perdi as chaves do meu armario ",
                            Situacao = "Respondido",
                            TipoRequerimento = "Requerimento com custo"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
